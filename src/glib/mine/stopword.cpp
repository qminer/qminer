/**
 * Copyright (c) 2015, Jozef Stefan Institute, Quintelligence d.o.o. and contributors
 * All rights reserved.
 * 
 * This source code is licensed under the FreeBSD license found in the
 * LICENSE file in the root directory of this source tree.
 */

/////////////////////////////////////////////////
// Stop-Word-Set
void TSwSet::Add(const TStr& WordStr){
  if (!WordStr.Empty()){
    //IAssert(!SwStrH.IsKey(WordStr));
    SwStrH.AddKey(WordStr);
  }
}

void TSwSet::MultiAdd(const TStr& Str){
  TStrV StrV; Str.SplitOnAllCh('.', StrV);
  for (int StrN=0; StrN<StrV.Len(); StrN++){Add(StrV[StrN]);}
}

void TSwSet::AddEn425(){
  MultiAdd(
   "A.ABOUT.ABOVE.ACROSS.AFTER."
   "AGAIN.AGAINST.ALL.ALMOST.ALONE."
   "ALONG.ALREADY.ALSO.ALTHOUGH.ALWAYS."
   "AMONG.AN.AND.ANOTHER.ANY."
   "ANYBODY.ANYONE.ANYTHING.ANYWHERE.ARE."
   "AREA.AREAS.AROUND.AS.ASK."
   "ASKED.ASKING.ASKS.AT.AWAY."
   "B.BACK.BACKED.BACKING.BACKS."
   "BE.BECAUSE.BECAME.BECOME.BECOMES."
   "BEEN.BEFORE.BEGAN.BEHIND.BEING."
   "BEINGS.BEST.BETTER.BETWEEN.BIG."
   "BOTH.BUT.BY.C.CAME."
   "CAN.CANNOT.CASE.CASES.CERTAIN."
   "CERTAINLY.CLEAR.CLEARLY.COME.COULD."
   "D.DID.DIFFER.DIFFERENT.DIFFERENTLY."
   "DO.DON.DOES.DOESN.DONE.DOWN.DOWNED."
   "DOWNING.DOWNS.DURING.E.EACH."
   "EARLY.EITHER.END.ENDED.ENDING."
   "ENDS.ENOUGH.EVEN.EVENLY.EVER."
   "EVERY.EVERYBODY.EVERYONE.EVERYTHING.EVERYWHERE."
   "F.FACE.FACES.FACT.FACTS."
   "FAR.FELT.FEW.FIND.FINDS."
   "FIRST.FOR.FOUR.FROM.FULL."
   "FULLY.FURTHER.FURTHERED.FURTHERING.FURTHERS."
   "G.GAVE.GENERAL.GENERALLY.GET."
   "GETS.GIVE.GIVEN.GIVES.GO."
   "GOING.GOOD.GOODS.GOT.GREAT."
   "GREATER.GREATEST.GROUP.GROUPED.GROUPING."
   "GROUPS.H.HAD.HAS.HAVE."
   "HAVING.HE.HER.HERSELF.HERE."
   "HIGH.HIGHER.HIGHEST.HIM.HIMSELF."
   "HIS.HOW.HOWEVER.I.IF."
   "IMPORTANT.IN.INTEREST.INTERESTED.INTERESTING."
   "INTERESTS.INTO.IS.IT.ITS."
   "ITSELF.J.JUST.K.KEEP."
   "KEEPS.KIND.KNEW.KNOW.KNOWN."
   "KNOWS.L.LARGE.LARGELY.LAST."
   "LATER.LATEST.LEAST.LESS.LET."
   "LETS.LIKE.LIKELY.LONG.LONGER."
   "LONGEST.M.MADE.MAKE.MAKING."
   "MAN.MANY.MAY.ME.MEMBER."
   "MEMBERS.MEN.MIGHT.MORE.MOST."
   "MOSTLY.MR.MRS.MUCH.MUST."
   "MY.MYSELF.N.NECESSARY.NEED."
   "NEEDED.NEEDING.NEEDS.NEVER.NEW."
   "NEWER.NEWEST.NEXT.NO.NON."
   "NOT.NOBODY.NOONE.NOTHING.NOW."
   "NOWHERE.NUMBER.NUMBERED.NUMBERING.NUMBERS."
   "O.OF.OFF.OFTEN.OLD."
   "OLDER.OLDEST.ON.ONCE.ONE."
   "ONLY.OPEN.OPENED.OPENING.OPENS."
   "OR.ORDER.ORDERED.ORDERING.ORDERS."
   "OTHER.OTHERS.OUR.OUT.OVER."
   "P.PART.PARTED.PARTING.PARTS."
   "PER.PERHAPS.PLACE.PLACES.POINT."
   "POINTED.POINTING.POINTS.POSSIBLE.PRESENT."
   "PRESENTED.PRESENTING.PRESENTS.PROBLEM.PROBLEMS."
   "PUT.PUTS.Q.QUITE.R."
   "RATHER.REALLY.RIGHT.ROOM.ROOMS."
   "S.SAID.SAME.SAW.SAY."
   "SAYS.SECOND.SECONDS.SEE.SEEM."
   "SEEMED.SEEMING.SEEMS.SEES.SEVERAL."
   "SHALL.SHE.SHOULD.SHOW.SHOWED."
   "SHOWING.SHOWS.SIDE.SIDES.SINCE."
   "SMALL.SMALLER.SMALLEST.SO.SOME."
   "SOMEBODY.SOMEONE.SOMETHING.SOMEWHERE.STATE."
   "STATES.STILL.SUCH.SURE.T."
   "TAKE.TAKEN.THAN.THAT.THE."
   "THEIR.THEM.THEN.THERE.THEREFORE."
   "THESE.THEY.THING.THINGS.THINK."
   "THINKS.THIS.THOSE.THOUGH.THOUGHT."
   "THOUGHTS.THREE.THROUGH.THUS.TO."
   "TODAY.TOGETHER.TOO.TOOK.TOWARD."
   "TURN.TURNED.TURNING.TURNS.TWO."
   "U.UNDER.UNTIL.UP.UPON."
   "US.USE.USES.USED.V.VE."
   "VERY.W.WANT.WANTED.WANTING."
   "WANTS.WAS.WAY.WAYS.WE."
   "WELL.WELLS.WENT.WERE.WHAT."
   "WHEN.WHERE.WHETHER.WHICH.WHILE."
   "WHO.WHOLE.WHOSE.WHY.WILL."
   "WITH.WITHIN.WITHOUT.WORK.WORKED."
   "WORKING.WORKS.WOULD.X.Y."
   "YEAR.YEARS.YET.YOU.YOUNG."
   "YOUNGER.YOUNGEST.YOUR.YOURS.Z.");
}

void TSwSet::AddEn523(){
  MultiAdd(
   "A.ABLE.ABOUT.ABOVE.ACCORDING."
   "ACCORDINGLY.ACROSS.ACTUALLY.AFTER.AFTERWARDS."
   "AGAIN.AGAINST.ALL.ALLOW.ALLOWS."
   "ALMOST.ALONE.ALONG.ALREADY.ALSO."
   "ALTHOUGH.ALWAYS.AM.AMONG.AMONGST."
   "AN.AND.ANOTHER.ANY.ANYBODY."
   "ANYHOW.ANYONE.ANYTHING.ANYWAY.ANYWAYS."
   "ANYWHERE.APART.APPEAR.APPRECIATE.APPROPRIATE."
   "ARE.AROUND.AS.ASIDE.ASK."
   "ASKING.ASSOCIATED.AT.AVAILABLE.AWAY."
   "AWFULLY.B.BE.BECAME.BECAUSE."
   "BECOME.BECOMES.BECOMING.BEEN.BEFORE."
   "BEFOREHAND.BEHIND.BEING.BELIEVE.BELOW."
   "BESIDE.BESIDES.BEST.BETTER.BETWEEN."
   "BEYOND.BOTH.BRIEF.BUT.BY."
   "C.CAME.CAN.CANNOT.CANT."
   "CAUSE.CAUSES.CERTAIN.CERTAINLY.CHANGES."
   "CLEARLY.CO.COM.COME.COMES."
   "CONCERNING.CONSEQUENTLY.CONSIDER.CONSIDERING.CONTAIN."
   "CONTAINING.CONTAINS.CORRESPONDING.COULD.COURSE."
   "CURRENTLY.D.DEFINITELY.DESCRIBED.DESPITE."
   "DID.DIFFERENT.DO.DON.DOES.DOESN.DOING."
   "DONE.DOWN.DOWNWARDS.DURING.E."
   "EACH.EDU.EG.EIGHT.EITHER."
   "ELSE.ELSEWHERE.ENOUGH.ENTIRELY.ESPECIALLY."
   "ET.ETC.EVEN.EVER.EVERY."
   "EVERYBODY.EVERYONE.EVERYTHING.EVERYWHERE.EX."
   "EXACTLY.EXAMPLE.EXCEPT.F.FAR."
   "FEW.FIFTH.FIRST.FIVE.FOLLOWED."
   "FOLLOWING.FOLLOWS.FOR.FORMER.FORMERLY."
   "FORTH.FOUR.FROM.FURTHER.FURTHERMORE."
   "G.GET.GETS.GETTING.GIVEN."
   "GIVES.GO.GOES.GOING.GONE."
   "GOT.GOTTEN.GREETINGS.H.HAD."
   "HAPPENS.HARDLY.HAS.HAVE.HAVING."
   "HE.HELLO.HELP.HENCE.HER."
   "HERE.HEREAFTER.HEREBY.HEREIN.HEREUPON."
   "HERS.HERSELF.HI.HIM.HIMSELF."
   "HIS.HITHER.HOPEFULLY.HOW.HOWBEIT."
   "HOWEVER.I.IE.IF.IGNORED."
   "IMMEDIATE.IN.INASMUCH.INC.INDEED."
   "INDICATE.INDICATED.INDICATES.INNER.INSOFAR."
   "INSTEAD.INTO.INWARD.IS.IT."
   "ITS.ITSELF.J.JUST.K."
   "KEEP.KEEPS.KEPT.KNOW.KNOWS."
   "KNOWN.L.LAST.LATELY.LATER."
   "LATTER.LATTERLY.LEAST.LESS.LEST."
   "LET.LIKE.LIKED.LIKELY.LITTLE."
   "LOOK.LOOKING.LOOKS.LTD.M."
   "MAINLY.MANY.MAY.MAYBE.ME."
   "MEAN.MEANWHILE.MERELY.MIGHT.MORE."
   "MOREOVER.MOST.MOSTLY.MUCH.MUST."
   "MY.MYSELF.N.NAME.NAMELY."
   "ND.NEAR.NEARLY.NECESSARY.NEED."
   "NEEDS.NEITHER.NEVER.NEVERTHELESS.NEW."
   "NEXT.NINE.NO.NOBODY.NON."
   "NONE.NOONE.NOR.NORMALLY.NOT."
   "NOTHING.NOVEL.NOW.NOWHERE.O."
   "OBVIOUSLY.OF.OFF.OFTEN.OH."
   "OK.OKAY.OLD.ON.ONCE."
   "ONE.ONES.ONLY.ONTO.OR."
   "OTHER.OTHERS.OTHERWISE.OUGHT.OUR."
   "OURS.OURSELVES.OUT.OUTSIDE.OVER."
   "OVERALL.OWN.P.PARTICULAR.PARTICULARLY."
   "PER.PERHAPS.PLACED.PLEASE.PLUS."
   "POSSIBLE.PRESUMABLY.PROBABLY.PROVIDES.Q."
   "QUE.QUITE.QV.R.RATHER."
   "RD.RE.REALLY.REASONABLY.REGARDING."
   "REGARDLESS.REGARDS.RELATIVELY.RESPECTIVELY.RIGHT."
   "S.SAID.SAME.SAW.SAY."
   "SAYING.SAYS.SECOND.SECONDLY.SEE."
   "SEEING.SEEM.SEEMED.SEEMING.SEEMS."
   "SEEN.SELF.SELVES.SENSIBLE.SENT."
   "SERIOUS.SERIOUSLY.SEVEN.SEVERAL.SHALL."
   "SHE.SHOULD.SINCE.SIX.SO."
   "SOME.SOMEBODY.SOMEHOW.SOMEONE.SOMETHING."
   "SOMETIME.SOMETIMES.SOMEWHAT.SOMEWHERE.SOON."
   "SORRY.SPECIFIED.SPECIFY.SPECIFYING.STILL."
   "SUB.SUCH.SUP.SURE.T."
   "TAKE.TAKEN.TELL.TENDS.TH."
   "THAN.THANK.THANKS.THANX.THAT."
   "THATS.THE.THEIR.THEIRS.THEM."
   "THEMSELVES.THEN.THENCE.THERE.THEREAFTER."
   "THEREBY.THEREFORE.THEREIN.THERES.THEREUPON."
   "THESE.THEY.THINK.THIRD.THIS."
   "THOROUGH.THOROUGHLY.THOSE.THOUGH.THREE."
   "THROUGH.THROUGHOUT.THRU.THUS.TO."
   "TOGETHER.TOO.TOOK.TOWARD.TOWARDS."
   "TRIED.TRIES.TRULY.TRY.TRYING."
   "TWICE.TWO.U.UN.UNDER."
   "UNFORTUNATELY.UNLESS.UNLIKELY.UNTIL.UNTO."
   "UP.UPON.US.USE.USED."
   "USEFUL.USES.USING.USUALLY.UUCP."
   "V.VALUE.VARIOUS.VE.VERY.VIA."
   "VIZ.VS.W.WANT.WANTS."
   "WAS.WAY.WE.WELCOME.WELL."
   "WENT.WERE.WHAT.WHATEVER.WHEN."
   "WHENCE.WHENEVER.WHERE.WHEREAFTER.WHEREAS."
   "WHEREBY.WHEREIN.WHEREUPON.WHEREVER.WHETHER."
   "WHICH.WHILE.WHITHER.WHO.WHOEVER."
   "WHOLE.WHOM.WHOSE.WHY.WILL."
   "WILLING.WISH.WITH.WITHIN.WITHOUT."
   "WONDER.WOULD.X.Y.YES."
   "YET.YOU.YOUR.YOURS.YOURSELF."
   "YOURSELVES.Z.ZERO.");
}

void TSwSet::AddGe(){
  MultiAdd(
   "ALLE.ALLEM.ALLEN.ALLER.ALLES."
   "ALS.AM.AN.ANDERE.ANDEREM."
   "AUCH.AUF.AUS.BEI.BIS."
   "DAS.DEM.DEN.DER.DES."
   "DIE.DURCH.EIN.EINE.EINEM."
   "EINEN.EINER.ES.FOR.FUR."
   "HAT."
   "HIER.IHRE.IN.IM.IST."
   "MEHR.MIT.NACH.NEBEN.ODER."
   "SEIN.SEINE.SEINEM.SEINEN.SICH."
   "SIE.SIND.SOWIE.UND.UBER."
   "UM.UND.UNTER.USW.VIELES."
   "VOM.VON.VOR.WIE.ZU."
   "ZUM.ZUR.");
}

void TSwSet::AddEs(){
  MultiAdd(
    "A.ACA.AHI.AJENA.AJENAS.AJENO.AJENOS.AL.ALGO.ALGUNA.ALGUNAS.ALGUNO.ALGUNOS."
    "ALGUN.ALLA.ALLI.AMBOS.ANTE.ANTES.AQUEL.AQUELLA.AQUELLAS.AQUELLO.AQUELLOS."
    "AQUI.AQUI.ARRIBA.ATRAS.ATRAS.BAJO.BASTANTE.BIEN.BIEN.CADA.CERCA.CIERTA."
    "CIERTAS.CIERTO.CIERTOS.COMO.CON.CONMIGO.CONSEGUIMOS.CONSEGUIR.CONSIGO."
    "CONSIGUE.CONSIGUEN.CONSIGUES.CONTIGO.CONTRA.CUAL.CUALES.CUALQUIER.CUALQUIERA."
    "CUALQUIERAS.CUAN.CUANDO.CUANTA.CUANTAS.CUANTO.CUANTOS.CUAN.CUANTA.CUANTAS."
    "CUANTO.CUANTOS.DE.DEJAR.DEL.DEMASIADA.DEMASIADAS.DEMASIADO.DEMASIADOS."
    "DEMAS.DENTRO.DESDE.DESPUES.DONDE.DOS.DONDE.E.EL.ELLA.ELLAS.ELLOS.EMPLEAIS."
    "EMPLEAN.EMPLEAR.EMPLEAS.EMPLEO.EN.ENCIMA.ENTONCES.ENTRE.ERA.ERAMOS.ERAN."
    "ERAS.ERES.ES.ESA.ESAS.ESE.ESOS.ESTA.ESTABA.ESTADO.ESTAIS.ESTAMOS.ESTAN."
    "ESTAR.ESTAS.ESTE.ESTOS.ESTOY.ESTA.ESTAIS.FIN.FUE.FUERON.FUI.FUIMOS.HA."
    "HABER.HACE.HACEIS.HACEMOS.HACEN.HACER.HACES.HAGO.HAN.HASTA.INCLUSO.INTENTA."
    "INTENTAIS.INTENTAMOS.INTENTAN.INTENTAR.INTENTAS.INTENTO.IR.JAMAS.JUNTO.JUNTOS."
    "LA.LARGO.LAS.LE.LO.LOS.MAS.ME.MENOS.MIA.MIENTRAS.MIO.MISMA.MISMAS.MISMO."
    "MISMOS.MODO.MUCHA.MUCHAS.MUCHO.MUCHOS.MUCHISIMA.MUCHISIMAS.MUCHISIMO.MUCHISIMOS."
    "MUY.MAS.MIA.MIO.NADA.NI.NINGUNA.NINGUNAS.NINGUNO.NINGUNOS.NO.NOS.NOSOTRAS."
    "NOSOTROS.NUESTRA.NUESTRAS.NUESTRO.NUESTROS.NUNCA.O.OS.OTRA.OTRAS.OTRO."
    "OTROS.PARA.PARECER.PER.PERO.POCA.POCAS.POCO.POCOS.PODEIS.PODEMOS.PODER."
    "PODRIA.PODRIAIS.PODRIAMOS.PODRIAN.PODRIAS.PODRIA.PODRIAIS.PODRIAMOS.PODRIAN."
    "PODRIAS.POR.PORQUE.PORQUE.PRIMERO.PUEDE.PUEDEN.PUEDO.PUES.QUE.QUERER.QUIENESQUIERA."
    "QUIENQUIERA.QUE.SABE.SABEIS.SABEMOS.SABEN.SABER.SABES.SE.SER.SI.SIDO.SIEMPRE."
    "SIENDO.SIN.SOBRE.SOIS.SOLAMENTE.SOLO.SOMOS.SOY.SR.SRA.SRES.STA.SU.SUS.SUYA."
    "SUYAS.SUYO.SUYOS.SI.SIN.SOLO.TAL.TALES.TAMBIEN.TAN.TANTA.TANTAS.TANTO."
    "TANTOS.TE.TENEIS.TENEMOS.TENER.TENGO.TI.TIENE.TIENEN.TODA.TODAS.TODO.TODOS."
    "TOMAR.TRAS.TUYA.TUYO.TU.ULTIMO.UN.UNA.UNAS.UNO.UNOS.USA.USAIS.USAMOS.USAN."
    "USAR.USAS.USO.USTED.USTEDES.VA.VAIS.VALOR.VAMOS.VAN.VARIAS.VARIOS.VAYA."
    "VERDAD.VERDADERA.VERDADERO.VOSOTRAS.VOSOTROS.VOY.VUESTRA.VUESTRAS.VUESTRO."
    "VUESTROS.Y.YA.YO.EL.ERAMOS.ESTAS.ESTE.");
}

void TSwSet::AddSi(){
  MultiAdd(
   "Z.ZAL.ZE.A.AH."
   "AHA.ALI.AMEN.AMPAK.BAJE."
   "BLIZU.BODISI.BOJDA.BRZKONE.BRZCAS."
   "BREZ.CELO.DA.DNO.DO."
   "DOBESEDNO.DOMALA.DRUG.DRUGA.DRUGACEN."
   "DRUGACNA.DRUGACNE.DRUGACNEGA.DRUGACNEM.DRUGACNEMU."
   "DRUGACNI.DRUGACNIH.DRUGACNIM.DRUGACNIMA.DRUGACNIMI."
   "DRUGACNO.DRUGE.DRUGEGA.DRUGEM.DRUGEMU."
   "DRUGI.DRUGIH.DRUGIM.DRUGIMA.DRUGIMI."
   "DRUGO.EN.ENA.ENAK.ENAKA."
   "ENAKE.ENAKEGA.ENAKEM.ENAKEMU.ENAKI."
   "ENAKIH.ENAKIM.ENAKIMA.ENAKIMI.ENAKO."
   "ENE.ENEGA.ENEM.ENEMU.ENI."
   "ENIH.ENIM.ENIMA.ENIMI.ENO."
   "GA.GOTOVO.H.HA.HEJ."
   "IN.ISTA.ISTE.ISTEGA.ISTEM."
   "ISTEMU.ISTI.ISTIH.ISTIM.ISTIMA."
   "ISTIMI.ISTO.ITAK.IZ.IZMED."
   "IZNAD.IZPOD.IZPRED.IZVEN.IZZA."
   "JAZ.JE.JI.JIH.JIM."
   "JIMA.JO.JU.K.KADAR."
   "KAJ.KAJNE.KAJPADA.KAJPAK.KAJTI."
   "KAK.KAKA.KAKE.KAKEGA.KAKEM."
   "KAKEMU.KAKI.KAKIH.KAKIM.KAKIMA."
   "KAKIMI.KAKO.KAKOR.KAKRSEN.KAKRSENKOLI."
   "KAKRSEN_KOLI.KAKRSNA.KAKRSNAKOLI.KAKRSNA_KOLI.KAKRSNE."
   "KAKRSNEGA.KAKRSNEGAKOLI.KAKRSNEGA_KOLI.KAKRSNEKOLI.KAKRSNEM."
   "KAKRSNEMKOLI.KAKRSNEMU.KAKRSNEMUKOLI.KAKRSNEMU_KOLI.KAKRSNEM_KOLI."
   "KAKRSNE_KOLI.KAKRSNI.KAKRSNIH.KAKRSNIHKOLI.KAKRSNIH_KOLI."
   "KAKRSNIKOLI.KAKRSNIM.KAKRSNIMA.KAKRSNIMAKOLI.KAKRSNIMA_KOLI."
   "KAKRSNIMI.KAKRSNIMIKOLI.KAKRSNIMI_KOLI.KAKRSNIMKOLI.KAKRSNIM_KOLI."
   "KAKRSNI_KOLI.KAKRSNO.KAKRSNOKOLI.KAKRSNO_KOLI.KAKSEN."
   "KAKSNA.KAKSNE.KAKSNEGA.KAKSNEM.KAKSNEMU."
   "KAKSNI.KAKSNIH.KAKSNIM.KAKSNIMA.KAKSNIMI."
   "KAKSNO.KAR.KARKOLI.KAR_KOLI.KATERA."
   "KATERAKOLI.KATERA_KOLI.KATERE.KATEREGA.KATEREGAKOLI."
   "KATEREGA_KOLI.KATEREKOLI.KATEREM.KATEREMKOLI.KATEREMU."
   "KATEREMUKOLI.KATEREMU_KOLI.KATEREM_KOLI.KATERE_KOLI.KATERI."
   "KATERIH.KATERIHKOLI.KATERIH_KOLI.KATERIKOLI.KATERIM."
   "KATERIMA.KATERIMAKOLI.KATERIMA_KOLI.KATERIMI.KATERIMIKOLI."
   "KATERIMI_KOLI.KATERIMKOLI.KATERIM_KOLI.KATERI_KOLI.KATERO."
   "KATEROKOLI.KATERO_KOLI.KDO.KDOR.KDORKOLI."
   "KDOR_KOLI.KER.KI.KLJUB.KLJUB_TEMU_DA."
   "KO.KOGA.KOGAR.KOGARKOLI.KOGAR_KOLI."
   "KOLI.KOLIK.KOLIKA.KOLIKE.KOLIKEGA."
   "KOLIKEM.KOLIKEMU.KOLIKI.KOLIKIH.KOLIKIM."
   "KOLIKIMA.KOLIKIMI.KOLIKO.KOLIKOR.KOLIKSEN."
   "KOLIKSNA.KOLIKSNE.KOLIKSNEGA.KOLIKSNEM.KOLIKSNEMU."
   "KOLIKSNI.KOLIKSNIH.KOLIKSNIM.KOLIKSNIMA.KOLIKSNIMI."
   "KOLIKSNO.KOM.KOMAJ.KOMER.KOMERKOLI."
   "KOMER_KOLI.KOMU.KOMUR.KOMURKOLI.KOMUR_KOLI."
   "KOT.KROG.LE.LE-ONA.LE-ONE."
   "LE-ONEGA.LE-ONEM.LE-ONEMU.LE-ONI.LE-ONIH."
   "LE-ONIM.LE-ONIMA.LE-ONIMI.LE-ONO.LE-TA."
   "LE-TAK.LE-TAKA.LE-TAKE.LE-TAKEGA.LE-TAKEM."
   "LE-TAKEMU.LE-TAKI.LE-TAKIH.LE-TAKIM.LE-TAKIMA."
   "LE-TAKIMI.LE-TAKO.LE-TAKSEN.LE-TAKSNA.LE-TAKSNE."
   "LE-TAKSNEGA.LE-TAKSNEM.LE-TAKSNEMU.LE-TAKSNI.LE-TAKSNIH."
   "LE-TAKSNIM.LE-TAKSNIMA.LE-TAKSNIMI.LE-TAKSNO.LE-TE."
   "LE-TEGA.LE-TEH.LE-TEJ.LE-TEM.LE-TEMA."
   "LE-TEMI.LE-TEMU.LE-TI.LE-TISTA.LE-TISTE."
   "LE-TISTEGA.LE-TISTEM.LE-TISTEMU.LE-TISTI.LE-TISTIH."
   "LE-TISTIM.LE-TISTIMA.LE-TISTIMI.LE-TISTO.LE-TO."
   "LE-TOLIKO.MALONE.MANO.MAR.MARSIKAJ."
   "MARSIKATERA.MARSIKATERE.MARSIKATEREGA.MARSIKATEREM.MARSIKATEREMU."
   "MARSIKATERI.MARSIKATERIH.MARSIKATERIM.MARSIKATERIMA.MARSIKATERIMI."
   "MARSIKATERO.MARSIKDO.MARSIKOGA.MARSIKOM.MARSIKOMU."
   "MARSICEM.MARSICEMU.MARSICESA.MARSICIM.MARVEC."
   "ME.MED.MEDNJE.MEDNJU.MEDSE."
   "MENDA.MENE.MENI.MENOJ.MI."
   "MIDVA.MIMO.MNOGO.MOJ.MOJA."
   "MOJE.MOJEGA.MOJEM.MOJEMU.MOJI."
   "MOJIH.MOJIM.MOJIMA.MOJIMI.MOJO."
   "MORDA.MOREBITI.MU.NA.NAD."
   "NADENJ.NADME.NADNJE.NADVSE.NAJ."
   "NAJBRZ.NAJIN.NAJINA.NAJINE.NAJINEGA."
   "NAJINEM.NAJINEMU.NAJINI.NAJINIH.NAJINIM."
   "NAJINIMA.NAJINIMI.NAJINO.NAJSI.NAJU."
   "NAM.NAMA.NAME.NAMESTO.NAMI."
   "NAMREC.NANJ.NANJE.NANJO.NANJU."
   "NAOKOLI.NAPROTI.NAS.NASE.NASPROTI."
   "NATE.NAVKLJUB.NAVZLIC.NAS.NASA."
   "NASE.NASEGA.NASEM.NASEMU.NASI."
   "NASIH.NASIM.NASIMA.NASIMI.NASO."
   "NE.NEK.NEKA.NEKAJ.NEKAK."
   "NEKAKA.NEKAKE.NEKAKEGA.NEKAKEM.NEKAKEMU."
   "NEKAKI.NEKAKIH.NEKAKIM.NEKAKIMA.NEKAKIMI."
   "NEKAKO.NEKAKSEN.NEKAKSNA.NEKAKSNE.NEKAKSNEGA."
   "NEKAKSNEM.NEKAKSNEMU.NEKAKSNI.NEKAKSNIH.NEKAKSNIM."
   "NEKAKSNIMA.NEKAKSNIMI.NEKAKSNO.NEKATERA.NEKATERE."
   "NEKATEREGA.NEKATEREM.NEKATEREMU.NEKATERI.NEKATERIH."
   "NEKATERIM.NEKATERIMA.NEKATERIMI.NEKATERO.NEKDO."
   "NEKE.NEKEGA.NEKEM.NEKEMU.NEKI."
   "NEKIH.NEKIM.NEKIMA.NEKIMI.NEKO."
   "NEKOGA.NEKOLIKO.NEKOM.NEKOMU.NEMARA."
   "NERAD.NERADI.NECEM.NECEMU.NECESA."
   "NECIM.NIHCE.NIKAKRSEN.NIKAKRSNA.NIKAKRSNE."
   "NIKAKRSNEGA.NIKAKRSNEM.NIKAKRSNEMU.NIKAKRSNI.NIKAKRSNIH."
   "NIKAKRSNIM.NIKAKRSNIMA.NIKAKRSNIMI.NIKAKRSNO.NIKAR."
   "NIKOGAR.NIKOMER.NIKOMUR.NITI.NIC."
   "NICEMER.NICEMUR.NICESAR.NICIMER.NJE."
   "NJEGA.NJEGOV.NJEGOVA.NJEGOVE.NJEGOVEGA."
   "NJEGOVEM.NJEGOVEMU.NJEGOVI.NJEGOVIH.NJEGOVIM."
   "NJEGOVIMA.NJEGOVIMI.NJEGOVO.NJEJ.NJEM."
   "NJEMU.NJEN.NJENA.NJENE.NJENEGA."
   "NJENEM.NJENEMU.NJENI.NJENIH.NJENIM."
   "NJENIMA.NJENIMI.NJENO.NJI.NJIH."
   "NJIHOV.NJIHOVA.NJIHOVE.NJIHOVEGA.NJIHOVEM."
   "NJIHOVEMU.NJIHOVI.NJIHOVIH.NJIHOVIM.NJIHOVIMA."
   "NJIHOVIMI.NJIHOVO.NJIJU.NJIM.NJIMA."
   "NJIMI.NJO.NJUN.NJUNA.NJUNE."
   "NJUNEGA.NJUNEM.NJUNEMU.NJUNI.NJUNIH."
   "NJUNIM.NJUNIMA.NJUNIMI.NJUNO.NO."
   "NOBEN.NOBENA.NOBENE.NOBENEGA.NOBENEM."
   "NOBENEMU.NOBENI.NOBENIH.NOBENIM.NOBENIMA."
   "NOBENIMI.NOBENO.O.OB.OBA."
   "OBE.OBEH.OBEMA.OBENJ.OD."
   "ODKAR.OH.OKOLI.OKROG.ON."
   "ONA.ONADVA.ONE.ONEDVE.ONEGA."
   "ONEM.ONEMU.ONI.ONIDVE.ONIH."
   "ONIM.ONIMA.ONIMI.ONKRAJ.ONO."
   "ONSTRAN.OZIROMA.PA.PAC.PO."
   "POD.PODNJO.POGODU.POLEG.POME."
   "PONJ.PONJE.PONJO.POTE.POVRH."
   "POVRHU.POZOR.PRAV.PRAVZAPRAV.PRECEJ."
   "PRED.PREDEN.PREDENJ.PREDME.PREDNJE."
   "PREDSE.PREDVSEM.PREK.PREKO.PREPROSTO."
   "PRI.PROTI.RAD.RADA.RADE."
   "RADI.RAVNO.RAZ.RAZEN.RES."
   "RESDA.S.SABO.SAJ.SAMO."
   "SE.SEBE.SEBI.SEBOJ.SEVEDA."
   "SI.SICER.SKORAJ.SKORAJDA.SKOZ."
   "SKOZENJ.SKOZI.SKOZNJE.SKOZNJO.SKOZTE."
   "SPET.SPLOH.SPOD.SPRICO.SREDI."
   "SVOJ.SVOJA.SVOJE.SVOJEGA.SVOJEM."
   "SVOJEMU.SVOJI.SVOJIH.SVOJIM.SVOJIMA."
   "SVOJIMI.SVOJO.TA.TABO.TAK."
   "TAKA.TAKALE.TAKE.TAKEGA.TAKEGALE."
   "TAKELE.TAKEM.TAKEMLE.TAKEMU.TAKEMULE."
   "TAKI.TAKIH.TAKIHLE.TAKILE.TAKIM."
   "TAKIMA.TAKIMALE.TAKIMI.TAKIMILE.TAKIMLE."
   "TAKLE.TAKO.TAKOLE.TAKSEN.TAKSNA."
   "TAKSNE.TAKSNEGA.TAKSNEM.TAKSNEMU.TAKSNI."
   "TAKSNIH.TAKSNIM.TAKSNIMA.TAKSNIMI.TAKSNO."
   "TALE.TE.TEBE.TEBI.TEBOJ."
   "TEGA.TEGALE.TEH.TEHLE.TEJ."
   "TEJLE.TELE.TEM.TEMA.TEMALE."
   "TEMI.TEMILE.TEMLE.TEMU.TEMULE."
   "TEMVEC.TER.TI.TILE.TISTA."
   "TISTE.TISTEGA.TISTEM.TISTEMU.TISTI."
   "TISTIH.TISTIM.TISTIMA.TISTIMI.TISTO."
   "TO.TODA.TOLE.TOLIK.TOLIKA."
   "TOLIKE.TOLIKEGA.TOLIKEM.TOLIKEMU.TOLIKI."
   "TOLIKIH.TOLIKIM.TOLIKIMA.TOLIKIMI.TOLIKO."
   "TOLIKSEN.TOLIKSNA.TOLIKSNE.TOLIKSNEGA.TOLIKSNEM."
   "TOLIKSNEMU.TOLIKSNI.TOLIKSNIH.TOLIKSNIM.TOLIKSNIMA."
   "TOLIKSNIMI.TOLIKSNO.TOREJ.TUDI.TVOJ."
   "TVOJA.TVOJE.TVOJEGA.TVOJEM.TVOJEMU."
   "TVOJI.TVOJIH.TVOJIM.TVOJIMA.TVOJIMI."
   "TVOJO.V.VAJIN.VAJINA.VAJINE."
   "VAJINEGA.VAJINEM.VAJINEMU.VAJINI.VAJINIH."
   "VAJINIM.VAJINIMA.VAJINIMI.VAJINO.VAJU."
   "VAM.VAMA.VAME.VAMI.VANJ."
   "VANJE.VANJO.VANJU.VAS.VASE."
   "VATE.VAS.VASA.VASE.VASEGA."
   "VASEM.VASEMU.VASI.VASIH.VASIM."
   "VASIMA.VASIMI.VASO.VENDAR.VENDARLE."
   "VERJETNO.VES.VI.VIDVA.VNOVIC."
   "VPRICO.VRED.VRH.VRHU.VSA."
   "VSAJ.VSAK.VSAKA.VSAKDO.VSAKE."
   "VSAKEGA.VSAKEM.VSAKEMU.VSAKI.VSAKIH."
   "VSAKIM.VSAKIMA.VSAKIMI.VSAKO.VSAKOGAR."
   "VSAKOMER.VSAKOMUR.VSAKRSEN.VSAKRSNA.VSAKRSNE."
   "VSAKRSNEGA.VSAKRSNEM.VSAKRSNEMU.VSAKRSNI.VSAKRSNIH."
   "VSAKRSNIM.VSAKRSNIMA.VSAKRSNIMI.VSAKRSNO.VSE."
   "VSEGA.VSEH.VSEJ.VSEM.VSEMA."
   "VSEMI.VSEMU.VSI.VSO.VZDOLZ."
   "VSEC.VSTRIC.Z.ZA.ZADOSTI."
   "ZAKAJ.ZAME.ZANJ.ZANJE.ZANJO."
   "ZANJU.ZAPORED.ZARADI.ZARES.ZASE."
   "ZATE.ZAVOLJO.ZGOLJ.ZLASTI.ZOPER."
   "ZOPET.ZRAVEN.ZUNAJ.SE.SELE."
   "CE.CEM.CEMER.CEMERKOLI.CEMER_KOLI."
   "CEMU.CEMUR.CEMURKOLI.CEMUR_KOLI.CEPRAV."
   "CERAVNO.CESA.CESAR.CESARKOLI.CESAR_KOLI."
   "CETUDI.CEZ.CEZENJ.CEZNJE.CIGAR."
   "CIGAV.CIGAVA.CIGAVE.CIGAVEGA.CIGAVEM."
   "CIGAVEMU.CIGAVI.CIGAVIH.CIGAVIM.CIGAVIMA."
   "CIGAVIMI.CIGAVO.CIM.CIMER.CIMERKOLI.");
}

void TSwSet::AddEn8(){
      MultiAdd("AND.AN.BY.FROM.OF.THE.WITH.");
}

TSwSet::TSwSet(
 const TSwSetType& _SwSetType, const int& _MnWordLen):
  SwSetType(_SwSetType), SwStrH(), MnWordLen(_MnWordLen){
  switch (SwSetType){
    case swstNone: break;
    case swstEn: AddEn523(); break;
    case swstEn8: AddEn8(); break;
    case swstEn425: AddEn425(); break;
    case swstEn523: AddEn523(); break;
    case swstEs: AddEs(); break;
    case swstGe: AddGe(); break;
    case swstSi: AddSi(); break;
    default: Fail;
  }
}

THash<TStr, TStrV> TSwSet::StopWordFiles;

bool TSwSet::IsValidList(const TStr SwListNm) {
    TSwSetType SwSetType= GetSwSetType(SwListNm);
    
    if (SwSetType == swstUndef && !StopWordFiles.IsKey(SwListNm)) {
        return false;
    }
    return true;
}

void TSwSet::AddByName(const TStr& _SwListNm) {
  TStr SwListNm = _SwListNm.GetLc();  // all names are lowercase
  if (!IsValidList(SwListNm)) {
      throw TExcept::New("Unknown stop-word definition '" + SwListNm + "'");                
  }
  // Predefined Stopword Collections
  if (SwListNm=="none"){return;}
  else if (SwListNm=="en"){ AddEn523(); }
  else if (SwListNm=="en8"){ AddEn8(); }
  else if (SwListNm=="en425"){ AddEn425(); }
  else if (SwListNm=="en523"){ AddEn523(); }
  else if (SwListNm=="es"){ AddEs(); }
  else if (SwListNm=="de"){ AddGe(); }
  else if (SwListNm=="si"){ AddSi(); }
  // File Stopword Collections
  else if (StopWordFiles.IsKey(SwListNm)) {
    TStrV SwV = StopWordFiles.GetDat(SwListNm);
    for (int SwN = 0; SwN < SwV.Len(); SwN++) {
      AddWord(SwV[SwN]);
    }
  }
}

TSwSet::TSwSet(const TStr& SwListNm, const int& _MnWordLen) {
  MnWordLen = _MnWordLen;
  AddByName(SwListNm);
}

bool TSwSet::IsIn(const TStr& WordStr, const bool& UcWordStrP) const {
  if (WordStr.Len()<MnWordLen){
    return true;
  } else {
    if (UcWordStrP){
      return SwStrH.IsKey(WordStr);
    } else {
      TStr UcWordStr=WordStr.GetUc();
      return SwStrH.IsKey(UcWordStr);
    }
  }
}

void TSwSet::AddWord(const TStr& WordStr){
  if (!WordStr.Empty()){
    SwStrH.AddKey(WordStr);
  }
}

void TSwSet::LoadFromFile(const TStr& FNm, const TBool& ClearStopWords) {
	if (!TFile::Exists(FNm)){
		printf("Stop Word File %s Does not Exist", FNm.CStr());
	}
	if (ClearStopWords.Val){
		SwStrH.Clr(); 
	}
    TStr FileStr = TStr::LoadTxt(FNm);
	//Stop words are seperated by newline or tab
    TStrV WordV; FileStr.SplitOnAllAnyCh("\n\r\t", WordV);
    for (int WordN = 0; WordN < WordV.Len(); WordN++) {
        const TStr& WordStr = WordV[WordN];
        if (!IsIn(WordStr)) { AddWord(WordStr); }
    }
}

void TSwSet::LoadSwFile(const TStr& FNm) {
    TStr FileStr = TStr::LoadTxt(FNm);
    TStr Name = FNm; Name = Name.LeftOfLast('.').RightOfLast('/').GetLc();
    FileStr.DelChAll('\r');
    TStrV LineV;
    TStrV SwList;
    FileStr.SplitOnAllCh('\n', LineV);

    for (int LineN = 0; LineN < LineV.Len(); LineN++) {
        TStr LineStr = LineV[LineN];
        if (LineStr.IsChIn('|')) {
            LineStr = LineStr.LeftOf('|');
        }
        LineStr = LineStr.GetTrunc().GetUc();
        if(!LineStr.Empty()) {
            SwList.AddUnique(LineStr);
        }
    }
    StopWordFiles.AddDat(Name, SwList);
}

void TSwSet::LoadSwDir(const TStr& DPath) {
  TStrV FNmV;
  TStr FExt = TStr("txt");
  TFFile::GetFNmV(DPath, TStrV::GetV(FExt), false, FNmV);
  for(int FldN = 0; FldN < FNmV.Len(); ++FldN) {
	LoadSwFile(FNmV.GetVal(FldN));
  }
}

void TSwSet::GetSwSetTypeNmV(TStrV& SwSetTypeNmV, TStrV& SwSetTypeDNmV){
  SwSetTypeNmV.Clr(); SwSetTypeDNmV.Clr();
  SwSetTypeNmV.Add("none"); SwSetTypeDNmV.Add("None");
  SwSetTypeNmV.Add("en"); SwSetTypeDNmV.Add("English");
  SwSetTypeNmV.Add("en8"); SwSetTypeDNmV.Add("English-8");
  SwSetTypeNmV.Add("en425"); SwSetTypeDNmV.Add("English-425");
  SwSetTypeNmV.Add("en523"); SwSetTypeDNmV.Add("English-523");
  SwSetTypeNmV.Add("es"); SwSetTypeDNmV.Add("Spanish");
  SwSetTypeNmV.Add("de"); SwSetTypeDNmV.Add("German");
  SwSetTypeNmV.Add("si"); SwSetTypeDNmV.Add("Slovene");
  // Add file stopwords
  TStrV KeyV;
  StopWordFiles.GetKeyV(KeyV);
  for(int KeyN = 0; KeyN < KeyV.Len(); KeyN++) {
    SwSetTypeNmV.Add(KeyV[KeyN]); SwSetTypeDNmV.Add(KeyV[KeyN]);
  }
}

TStr TSwSet::GetSwSetTypeNmVStr(){
  TChA ChA;
  ChA+='(';
  ChA+="none"; ChA+=", ";
  ChA+="en"; ChA+=", ";
  ChA+="en8"; ChA+=", ";
  ChA+="en425"; ChA+=", ";
  ChA+="en523"; ChA+=", ";
  ChA+="es"; ChA+=", ";
  ChA+="de"; ChA+=", ";
  ChA+="si"; ChA+=")";
  return ChA;
}

TSwSetType TSwSet::GetSwSetType(const TStr& SwSetTypeNm){
  TStr LcSwSetTypeNm=SwSetTypeNm.GetLc();
  if (LcSwSetTypeNm=="none"){return swstNone;}
  else if (LcSwSetTypeNm=="en"){return swstEn523;}
  else if (LcSwSetTypeNm=="en8"){return swstEn8;}
  else if (LcSwSetTypeNm=="en425"){return swstEn425;}
  else if (LcSwSetTypeNm=="en523"){return swstEn523;}
  else if (LcSwSetTypeNm=="es"){return swstEs;}
  else if (LcSwSetTypeNm=="de"){return swstGe;}
  else if (LcSwSetTypeNm=="si"){return swstSi;}
  else {return swstUndef;}
}

PSwSet TSwSet::GetSwSet(const TSwSetType& SwSetType){
  static THash<TInt, PSwSet> SwSetTypeToSwSetH;
  PSwSet SwSet;
  if (SwSetTypeToSwSetH.IsKeyGetDat(TInt(int(SwSetType)), SwSet)){
  } else {
    SwSet=TSwSet::New(SwSetType);
    SwSetTypeToSwSetH.AddDat(TInt(int(SwSetType)), SwSet);
  }
  return SwSet;
}



PSwSet TSwSet::ParseJson(const PJsonVal& SwVal) {
    TStr SwListNm;
	PSwSet SwSet = TSwSet::New(swstNone);

    if (SwVal->IsStr()) { // string param => load predefined SW List
        SwListNm = SwVal->GetStr();
        SwSet = TSwSet::New(SwListNm);
    } else if (SwVal->IsArr()) { // user provided an array of stopwords
        for (int WordN = 0; WordN < SwVal->GetArrVals(); WordN++) {
            PJsonVal WordVal = SwVal->GetArrVal(WordN);
            EAssert(WordVal->IsStr());
            SwSet->AddWord(WordVal->GetStr().GetUc());
        }        
    } else if (SwVal->IsObj()) {
        // load predefined set
        if (SwVal->IsObjKey("language")) {
            PJsonVal SwTypeVal = SwVal->GetObjKey("language");
            EAssert(SwTypeVal->IsStr());
            SwListNm = SwTypeVal->GetStr();
            SwSet = TSwSet::New(SwListNm);
        }
        // add any additional words
        if (SwVal->IsObjKey("words")) {
            PJsonVal SwWordsVal = SwVal->GetObjKey("words");
            EAssert(SwWordsVal->IsArr());
            for (int WordN = 0; WordN < SwWordsVal->GetArrVals(); WordN++) {
                PJsonVal WordVal = SwWordsVal->GetArrVal(WordN);
                EAssert(WordVal->IsStr());
                SwSet->AddWord(WordVal->GetStr().GetUc());
            }
        }
    } else {
        throw TExcept::New("Unknown stop-word definition '" + SwVal->SaveStr() + "'");
    }
    return SwSet;    
}
